-- Create application_train table
CREATE TABLE application_train (
	SK_ID_CURR VARCHAR(50),
	TARGET INTEGER,
	NAME_CONTRACT_TYPE VARCHAR(30),
	CODE_GENDER VARCHAR(5),
	FLAG_OWN_CAR VARCHAR(5),
	FLAG_OWN_REALTY VARCHAR(5),
	CNT_CHILDREN INTEGER,
	AMT_INCOME_TOTAL NUMERIC(100, 2),
	AMT_CREDIT NUMERIC(100, 2),
	AMT_ANNUITY NUMERIC(100, 2),
	AMT_GOODS_PRICE NUMERIC(100, 2),
	NAME_TYPE_SUITE VARCHAR(30),
	NAME_INCOME_TYPE VARCHAR(30),
	NAME_EDUCATION_TYPE VARCHAR(30),
	NAME_FAMILY_STATUS VARCHAR(30),
	NAME_HOUSING_TYPE VARCHAR(30),
	REGION_POPULATION_RELATIVE DOUBLE PRECISION,
	DAYS_BIRTH INTEGER,
	DAYS_EMPLOYED INTEGER,
	DAYS_REGISTRATION NUMERIC(100, 2),
	DAYS_ID_PUBLISH INTEGER,
	OWN_CAR_AGE NUMERIC(100, 2),
	FLAG_MOBIL INTEGER, 
	FLAG_EMP_PHONE INTEGER,
	FLAG_WORK_PHONE INTEGER,
	FLAG_CONT_MOBILE INTEGER, 
	FLAG_PHONE INTEGER, 
	FLAG_EMAIL INTEGER,
	OCCUPATION_TYPE VARCHAR(30),
	CNT_FAM_MEMBERS NUMERIC(100, 2),
	REGION_RATING_CLIENT INTEGER,
	REGION_RATING_CLIENT_W_CITY INTEGER,
	WEEKDAY_APPR_PROCESS_START VARCHAR(15),
	HOUR_APPR_PROCESS_START INTEGER,
	REG_REGION_NOT_LIVE_REGION INTEGER,
	REG_REGION_NOT_WORK_REGION INTEGER, 
	LIVE_REGION_NOT_WORK_REGION INTEGER, 
	REG_CITY_NOT_LIVE_CITY INTEGER, 
	REG_CITY_NOT_WORK_CITY INTEGER, 
	LIVE_CITY_NOT_WORK_CITY INTEGER, 
	ORGANIZATION_TYPE VARCHAR(30),
	EXT_SOURCE_1 DOUBLE PRECISION,
	EXT_SOURCE_2 DOUBLE PRECISION,
	EXT_SOURCE_3 DOUBLE PRECISION, 
	APARTMENTS_AVG DOUBLE PRECISION,
	BASEMENTAREA_AVG DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_AVG DOUBLE PRECISION, 
	YEARS_BUILD_AVG DOUBLE PRECISION,
	COMMONAREA_AVG DOUBLE PRECISION,
	ELEVATORS_AVG DOUBLE PRECISION,
	ENTRANCES_AVG DOUBLE PRECISION,
	FLOORSMAX_AVG DOUBLE PRECISION,
	FLOORSMIN_AVG DOUBLE PRECISION,
	LANDAREA_AVG DOUBLE PRECISION,
	LIVINGAPARTMENTS_AVG DOUBLE PRECISION,
	LIVINGAREA_AVG DOUBLE PRECISION, 
	NONLIVINGAPARTMENTS_AVG DOUBLE PRECISION,
	NONLIVINGAREA_AVG DOUBLE PRECISION,
	APARTMENTS_MODE DOUBLE PRECISION, 
	BASEMENTAREA_MODE DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_MODE DOUBLE PRECISION, 
	YEARS_BUILD_MODE DOUBLE PRECISION, 
	COMMONAREA_MODE DOUBLE PRECISION,
	ELEVATORS_MODE DOUBLE PRECISION,
	ENTRANCES_MODE DOUBLE PRECISION,
	FLOORSMAX_MODE DOUBLE PRECISION,
	FLOORSMIN_MODE DOUBLE PRECISION,
	LANDAREA_MODE DOUBLE PRECISION,
	LIVINGAPARTMENTS_MODE DOUBLE PRECISION,
	LIVINGAREA_MODE DOUBLE PRECISION,
	NONLIVINGAPARTMENTS_MODE DOUBLE PRECISION,
	NONLIVINGAREA_MODE DOUBLE PRECISION,
	APARTMENTS_MEDI DOUBLE PRECISION,
	BASEMENTAREA_MEDI DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_MEDI DOUBLE PRECISION,
	YEARS_BUILD_MEDI DOUBLE PRECISION,
	COMMONAREA_MEDI DOUBLE PRECISION, 
	ELEVATORS_MEDI DOUBLE PRECISION,
	ENTRANCES_MEDI DOUBLE PRECISION,
	FLOORSMAX_MEDI DOUBLE PRECISION,
	FLOORSMIN_MEDI DOUBLE PRECISION,
	LANDAREA_MEDI DOUBLE PRECISION,
	LIVINGAPARTMENTS_MEDI DOUBLE PRECISION,
	LIVINGAREA_MEDI DOUBLE PRECISION, 
	NONLIVINGAPARTMENTS_MEDI DOUBLE PRECISION, 
	NONLIVINGAREA_MEDI DOUBLE PRECISION,
	FONDKAPREMONT_MODE VARCHAR(30),
	HOUSETYPE_MODE VARCHAR(30),
	TOTALAREA_MODE DOUBLE PRECISION,
	WALLSMATERIAL_MODE VARCHAR(30),
	EMERGENCYSTATE_MODE VARCHAR(5),
	OBS_30_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DEF_30_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	OBS_60_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DEF_60_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DAYS_LAST_PHONE_CHANGE NUMERIC(100, 2),
	FLAG_DOCUMENT_2 INTEGER,
	FLAG_DOCUMENT_3 INTEGER,
	FLAG_DOCUMENT_4 INTEGER,
	FLAG_DOCUMENT_5 INTEGER,
	FLAG_DOCUMENT_6 INTEGER,
	FLAG_DOCUMENT_7 INTEGER,
	FLAG_DOCUMENT_8 INTEGER,
	FLAG_DOCUMENT_9 INTEGER,
	FLAG_DOCUMENT_10 INTEGER, 
	FLAG_DOCUMENT_11 INTEGER,
	FLAG_DOCUMENT_12 INTEGER,
	FLAG_DOCUMENT_13 INTEGER,
	FLAG_DOCUMENT_14 INTEGER,
	FLAG_DOCUMENT_15 INTEGER,
	FLAG_DOCUMENT_16 INTEGER,
	FLAG_DOCUMENT_17 INTEGER,
	FLAG_DOCUMENT_18 INTEGER,
	FLAG_DOCUMENT_19 INTEGER,
	FLAG_DOCUMENT_20 INTEGER,
	FLAG_DOCUMENT_21 INTEGER,
	AMT_REQ_CREDIT_BUREAU_HOUR NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_DAY NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_WEEK NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_MON NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_QRT NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_YEAR NUMERIC(100, 2),
	PRIMARY KEY (SK_ID_CURR)
);

-- Import data from csv file to application_train table
COPY application_train(SK_ID_CURR, TARGET, NAME_CONTRACT_TYPE, CODE_GENDER, FLAG_OWN_CAR, FLAG_OWN_REALTY, CNT_CHILDREN, AMT_INCOME_TOTAL, AMT_CREDIT, AMT_ANNUITY, AMT_GOODS_PRICE, NAME_TYPE_SUITE, NAME_INCOME_TYPE, NAME_EDUCATION_TYPE, NAME_FAMILY_STATUS, NAME_HOUSING_TYPE, REGION_POPULATION_RELATIVE, DAYS_BIRTH, DAYS_EMPLOYED, DAYS_REGISTRATION, DAYS_ID_PUBLISH, OWN_CAR_AGE, FLAG_MOBIL, FLAG_EMP_PHONE, FLAG_WORK_PHONE, FLAG_CONT_MOBILE, FLAG_PHONE, FLAG_EMAIL, OCCUPATION_TYPE, CNT_FAM_MEMBERS, REGION_RATING_CLIENT, REGION_RATING_CLIENT_W_CITY, WEEKDAY_APPR_PROCESS_START, HOUR_APPR_PROCESS_START, REG_REGION_NOT_LIVE_REGION, REG_REGION_NOT_WORK_REGION, LIVE_REGION_NOT_WORK_REGION, REG_CITY_NOT_LIVE_CITY, REG_CITY_NOT_WORK_CITY, LIVE_CITY_NOT_WORK_CITY, ORGANIZATION_TYPE, EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3, APARTMENTS_AVG, BASEMENTAREA_AVG, YEARS_BEGINEXPLUATATION_AVG, YEARS_BUILD_AVG, COMMONAREA_AVG, ELEVATORS_AVG, ENTRANCES_AVG, FLOORSMAX_AVG, FLOORSMIN_AVG, LANDAREA_AVG, LIVINGAPARTMENTS_AVG, LIVINGAREA_AVG, NONLIVINGAPARTMENTS_AVG, NONLIVINGAREA_AVG, APARTMENTS_MODE, BASEMENTAREA_MODE, YEARS_BEGINEXPLUATATION_MODE, YEARS_BUILD_MODE, COMMONAREA_MODE, ELEVATORS_MODE, ENTRANCES_MODE, FLOORSMAX_MODE, FLOORSMIN_MODE, LANDAREA_MODE, LIVINGAPARTMENTS_MODE, LIVINGAREA_MODE, NONLIVINGAPARTMENTS_MODE, NONLIVINGAREA_MODE, APARTMENTS_MEDI, BASEMENTAREA_MEDI, YEARS_BEGINEXPLUATATION_MEDI, YEARS_BUILD_MEDI, COMMONAREA_MEDI, ELEVATORS_MEDI, ENTRANCES_MEDI, FLOORSMAX_MEDI, FLOORSMIN_MEDI, LANDAREA_MEDI, LIVINGAPARTMENTS_MEDI, LIVINGAREA_MEDI, NONLIVINGAPARTMENTS_MEDI, NONLIVINGAREA_MEDI, FONDKAPREMONT_MODE, HOUSETYPE_MODE, TOTALAREA_MODE, WALLSMATERIAL_MODE, EMERGENCYSTATE_MODE, OBS_30_CNT_SOCIAL_CIRCLE, DEF_30_CNT_SOCIAL_CIRCLE, OBS_60_CNT_SOCIAL_CIRCLE, DEF_60_CNT_SOCIAL_CIRCLE, DAYS_LAST_PHONE_CHANGE, FLAG_DOCUMENT_2, FLAG_DOCUMENT_3, FLAG_DOCUMENT_4, FLAG_DOCUMENT_5, FLAG_DOCUMENT_6, FLAG_DOCUMENT_7, FLAG_DOCUMENT_8, FLAG_DOCUMENT_9, FLAG_DOCUMENT_10, FLAG_DOCUMENT_11, FLAG_DOCUMENT_12, FLAG_DOCUMENT_13, FLAG_DOCUMENT_14, FLAG_DOCUMENT_15, FLAG_DOCUMENT_16, FLAG_DOCUMENT_17, FLAG_DOCUMENT_18, FLAG_DOCUMENT_19, FLAG_DOCUMENT_20, FLAG_DOCUMENT_21, AMT_REQ_CREDIT_BUREAU_HOUR, AMT_REQ_CREDIT_BUREAU_DAY, AMT_REQ_CREDIT_BUREAU_WEEK, AMT_REQ_CREDIT_BUREAU_MON, AMT_REQ_CREDIT_BUREAU_QRT, AMT_REQ_CREDIT_BUREAU_YEAR)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\application_train.csv'
DELIMITER ',' CSV HEADER;

-- Check application_train table
SELECT * FROM application_train;


-- Create application_test table
CREATE TABLE application_test (
	SK_ID_CURR VARCHAR(50),
	NAME_CONTRACT_TYPE VARCHAR(30),
	CODE_GENDER VARCHAR(5),
	FLAG_OWN_CAR VARCHAR(5),
	FLAG_OWN_REALTY VARCHAR(5),
	CNT_CHILDREN INTEGER,
	AMT_INCOME_TOTAL NUMERIC(100, 2),
	AMT_CREDIT NUMERIC(100, 2),
	AMT_ANNUITY NUMERIC(100, 2),
	AMT_GOODS_PRICE NUMERIC(100, 2),
	NAME_TYPE_SUITE VARCHAR(30),
	NAME_INCOME_TYPE VARCHAR(30),
	NAME_EDUCATION_TYPE VARCHAR(30),
	NAME_FAMILY_STATUS VARCHAR(30),
	NAME_HOUSING_TYPE VARCHAR(30),
	REGION_POPULATION_RELATIVE DOUBLE PRECISION,
	DAYS_BIRTH INTEGER,
	DAYS_EMPLOYED INTEGER,
	DAYS_REGISTRATION NUMERIC(100, 2),
	DAYS_ID_PUBLISH INTEGER,
	OWN_CAR_AGE NUMERIC(100, 2),
	FLAG_MOBIL INTEGER, 
	FLAG_EMP_PHONE INTEGER,
	FLAG_WORK_PHONE INTEGER,
	FLAG_CONT_MOBILE INTEGER, 
	FLAG_PHONE INTEGER, 
	FLAG_EMAIL INTEGER,
	OCCUPATION_TYPE VARCHAR(30),
	CNT_FAM_MEMBERS NUMERIC(100, 2),
	REGION_RATING_CLIENT INTEGER,
	REGION_RATING_CLIENT_W_CITY INTEGER,
	WEEKDAY_APPR_PROCESS_START VARCHAR(15),
	HOUR_APPR_PROCESS_START INTEGER,
	REG_REGION_NOT_LIVE_REGION INTEGER,
	REG_REGION_NOT_WORK_REGION INTEGER, 
	LIVE_REGION_NOT_WORK_REGION INTEGER, 
	REG_CITY_NOT_LIVE_CITY INTEGER, 
	REG_CITY_NOT_WORK_CITY INTEGER, 
	LIVE_CITY_NOT_WORK_CITY INTEGER, 
	ORGANIZATION_TYPE VARCHAR(30),
	EXT_SOURCE_1 DOUBLE PRECISION,
	EXT_SOURCE_2 DOUBLE PRECISION,
	EXT_SOURCE_3 DOUBLE PRECISION, 
	APARTMENTS_AVG DOUBLE PRECISION,
	BASEMENTAREA_AVG DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_AVG DOUBLE PRECISION, 
	YEARS_BUILD_AVG DOUBLE PRECISION,
	COMMONAREA_AVG DOUBLE PRECISION,
	ELEVATORS_AVG DOUBLE PRECISION,
	ENTRANCES_AVG DOUBLE PRECISION,
	FLOORSMAX_AVG DOUBLE PRECISION,
	FLOORSMIN_AVG DOUBLE PRECISION,
	LANDAREA_AVG DOUBLE PRECISION,
	LIVINGAPARTMENTS_AVG DOUBLE PRECISION,
	LIVINGAREA_AVG DOUBLE PRECISION, 
	NONLIVINGAPARTMENTS_AVG DOUBLE PRECISION,
	NONLIVINGAREA_AVG DOUBLE PRECISION,
	APARTMENTS_MODE DOUBLE PRECISION, 
	BASEMENTAREA_MODE DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_MODE DOUBLE PRECISION, 
	YEARS_BUILD_MODE DOUBLE PRECISION, 
	COMMONAREA_MODE DOUBLE PRECISION,
	ELEVATORS_MODE DOUBLE PRECISION,
	ENTRANCES_MODE DOUBLE PRECISION,
	FLOORSMAX_MODE DOUBLE PRECISION,
	FLOORSMIN_MODE DOUBLE PRECISION,
	LANDAREA_MODE DOUBLE PRECISION,
	LIVINGAPARTMENTS_MODE DOUBLE PRECISION,
	LIVINGAREA_MODE DOUBLE PRECISION,
	NONLIVINGAPARTMENTS_MODE DOUBLE PRECISION,
	NONLIVINGAREA_MODE DOUBLE PRECISION,
	APARTMENTS_MEDI DOUBLE PRECISION,
	BASEMENTAREA_MEDI DOUBLE PRECISION,
	YEARS_BEGINEXPLUATATION_MEDI DOUBLE PRECISION,
	YEARS_BUILD_MEDI DOUBLE PRECISION,
	COMMONAREA_MEDI DOUBLE PRECISION, 
	ELEVATORS_MEDI DOUBLE PRECISION,
	ENTRANCES_MEDI DOUBLE PRECISION,
	FLOORSMAX_MEDI DOUBLE PRECISION,
	FLOORSMIN_MEDI DOUBLE PRECISION,
	LANDAREA_MEDI DOUBLE PRECISION,
	LIVINGAPARTMENTS_MEDI DOUBLE PRECISION,
	LIVINGAREA_MEDI DOUBLE PRECISION, 
	NONLIVINGAPARTMENTS_MEDI DOUBLE PRECISION, 
	NONLIVINGAREA_MEDI DOUBLE PRECISION,
	FONDKAPREMONT_MODE VARCHAR(30),
	HOUSETYPE_MODE VARCHAR(30),
	TOTALAREA_MODE DOUBLE PRECISION,
	WALLSMATERIAL_MODE VARCHAR(30),
	EMERGENCYSTATE_MODE VARCHAR(5),
	OBS_30_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DEF_30_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	OBS_60_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DEF_60_CNT_SOCIAL_CIRCLE NUMERIC(100, 2),
	DAYS_LAST_PHONE_CHANGE NUMERIC(100, 2),
	FLAG_DOCUMENT_2 INTEGER,
	FLAG_DOCUMENT_3 INTEGER,
	FLAG_DOCUMENT_4 INTEGER,
	FLAG_DOCUMENT_5 INTEGER,
	FLAG_DOCUMENT_6 INTEGER,
	FLAG_DOCUMENT_7 INTEGER,
	FLAG_DOCUMENT_8 INTEGER,
	FLAG_DOCUMENT_9 INTEGER,
	FLAG_DOCUMENT_10 INTEGER, 
	FLAG_DOCUMENT_11 INTEGER,
	FLAG_DOCUMENT_12 INTEGER,
	FLAG_DOCUMENT_13 INTEGER,
	FLAG_DOCUMENT_14 INTEGER,
	FLAG_DOCUMENT_15 INTEGER,
	FLAG_DOCUMENT_16 INTEGER,
	FLAG_DOCUMENT_17 INTEGER,
	FLAG_DOCUMENT_18 INTEGER,
	FLAG_DOCUMENT_19 INTEGER,
	FLAG_DOCUMENT_20 INTEGER,
	FLAG_DOCUMENT_21 INTEGER,
	AMT_REQ_CREDIT_BUREAU_HOUR NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_DAY NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_WEEK NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_MON NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_QRT NUMERIC(100, 2),
	AMT_REQ_CREDIT_BUREAU_YEAR NUMERIC(100, 2),
	PRIMARY KEY (SK_ID_CURR)
);

-- Import data from csv file to application_test table
COPY application_test(SK_ID_CURR, NAME_CONTRACT_TYPE, CODE_GENDER, FLAG_OWN_CAR, FLAG_OWN_REALTY, CNT_CHILDREN, AMT_INCOME_TOTAL, AMT_CREDIT, AMT_ANNUITY, AMT_GOODS_PRICE, NAME_TYPE_SUITE, NAME_INCOME_TYPE, NAME_EDUCATION_TYPE, NAME_FAMILY_STATUS, NAME_HOUSING_TYPE, REGION_POPULATION_RELATIVE, DAYS_BIRTH, DAYS_EMPLOYED, DAYS_REGISTRATION, DAYS_ID_PUBLISH, OWN_CAR_AGE, FLAG_MOBIL, FLAG_EMP_PHONE, FLAG_WORK_PHONE, FLAG_CONT_MOBILE, FLAG_PHONE, FLAG_EMAIL, OCCUPATION_TYPE, CNT_FAM_MEMBERS, REGION_RATING_CLIENT, REGION_RATING_CLIENT_W_CITY, WEEKDAY_APPR_PROCESS_START, HOUR_APPR_PROCESS_START, REG_REGION_NOT_LIVE_REGION, REG_REGION_NOT_WORK_REGION, LIVE_REGION_NOT_WORK_REGION, REG_CITY_NOT_LIVE_CITY, REG_CITY_NOT_WORK_CITY, LIVE_CITY_NOT_WORK_CITY, ORGANIZATION_TYPE, EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3, APARTMENTS_AVG, BASEMENTAREA_AVG, YEARS_BEGINEXPLUATATION_AVG, YEARS_BUILD_AVG, COMMONAREA_AVG, ELEVATORS_AVG, ENTRANCES_AVG, FLOORSMAX_AVG, FLOORSMIN_AVG, LANDAREA_AVG, LIVINGAPARTMENTS_AVG, LIVINGAREA_AVG, NONLIVINGAPARTMENTS_AVG, NONLIVINGAREA_AVG, APARTMENTS_MODE, BASEMENTAREA_MODE, YEARS_BEGINEXPLUATATION_MODE, YEARS_BUILD_MODE, COMMONAREA_MODE, ELEVATORS_MODE, ENTRANCES_MODE, FLOORSMAX_MODE, FLOORSMIN_MODE, LANDAREA_MODE, LIVINGAPARTMENTS_MODE, LIVINGAREA_MODE, NONLIVINGAPARTMENTS_MODE, NONLIVINGAREA_MODE, APARTMENTS_MEDI, BASEMENTAREA_MEDI, YEARS_BEGINEXPLUATATION_MEDI, YEARS_BUILD_MEDI, COMMONAREA_MEDI, ELEVATORS_MEDI, ENTRANCES_MEDI, FLOORSMAX_MEDI, FLOORSMIN_MEDI, LANDAREA_MEDI, LIVINGAPARTMENTS_MEDI, LIVINGAREA_MEDI, NONLIVINGAPARTMENTS_MEDI, NONLIVINGAREA_MEDI, FONDKAPREMONT_MODE, HOUSETYPE_MODE, TOTALAREA_MODE, WALLSMATERIAL_MODE, EMERGENCYSTATE_MODE, OBS_30_CNT_SOCIAL_CIRCLE, DEF_30_CNT_SOCIAL_CIRCLE, OBS_60_CNT_SOCIAL_CIRCLE, DEF_60_CNT_SOCIAL_CIRCLE, DAYS_LAST_PHONE_CHANGE, FLAG_DOCUMENT_2, FLAG_DOCUMENT_3, FLAG_DOCUMENT_4, FLAG_DOCUMENT_5, FLAG_DOCUMENT_6, FLAG_DOCUMENT_7, FLAG_DOCUMENT_8, FLAG_DOCUMENT_9, FLAG_DOCUMENT_10, FLAG_DOCUMENT_11, FLAG_DOCUMENT_12, FLAG_DOCUMENT_13, FLAG_DOCUMENT_14, FLAG_DOCUMENT_15, FLAG_DOCUMENT_16, FLAG_DOCUMENT_17, FLAG_DOCUMENT_18, FLAG_DOCUMENT_19, FLAG_DOCUMENT_20, FLAG_DOCUMENT_21, AMT_REQ_CREDIT_BUREAU_HOUR, AMT_REQ_CREDIT_BUREAU_DAY, AMT_REQ_CREDIT_BUREAU_WEEK, AMT_REQ_CREDIT_BUREAU_MON, AMT_REQ_CREDIT_BUREAU_QRT, AMT_REQ_CREDIT_BUREAU_YEAR)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\application_test.csv'
DELIMITER ',' CSV HEADER;

-- Check application_test table
SELECT * FROM application_test;


-- Create bureau table
CREATE TABLE bureau (
	SK_ID_CURR VARCHAR(50),
	SK_ID_BUREAU VARCHAR(50),
	CREDIT_ACTIVE VARCHAR(15),
	CREDIT_CURRENCY VARCHAR(15), 
	DAYS_CREDIT INTEGER,
	CREDIT_DAY_OVERDUE INTEGER,
	DAYS_CREDIT_ENDDATE NUMERIC(100, 2),
	DAYS_ENDDATE_FACT NUMERIC(100, 2), 
	AMT_CREDIT_MAX_OVERDUE NUMERIC(100, 2),
	CNT_CREDIT_PROLONG INTEGER,
	AMT_CREDIT_SUM NUMERIC(100, 2), 
	AMT_CREDIT_SUM_DEBT NUMERIC(100, 2), 
	AMT_CREDIT_SUM_LIMIT NUMERIC(100, 2),
	AMT_CREDIT_SUM_OVERDUE NUMERIC(100, 2),
	CREDIT_TYPE VARCHAR(50),
	DAYS_CREDIT_UPDATE INTEGER,
	AMT_ANNUITY NUMERIC(100, 2),
	PRIMARY KEY (SK_ID_BUREAU)
);

-- Import data from csv file to bureau table
COPY bureau(SK_ID_CURR, SK_ID_BUREAU, CREDIT_ACTIVE, CREDIT_CURRENCY, DAYS_CREDIT, CREDIT_DAY_OVERDUE, DAYS_CREDIT_ENDDATE, DAYS_ENDDATE_FACT, AMT_CREDIT_MAX_OVERDUE, CNT_CREDIT_PROLONG, AMT_CREDIT_SUM, AMT_CREDIT_SUM_DEBT, AMT_CREDIT_SUM_LIMIT, AMT_CREDIT_SUM_OVERDUE, CREDIT_TYPE, DAYS_CREDIT_UPDATE, AMT_ANNUITY)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\bureau.csv'
DELIMITER ',' CSV HEADER;

-- Check bureau table
SELECT * FROM bureau;


-- Create bureau_balance table
CREATE TABLE bureau_balance (
	SK_ID_BUREAU VARCHAR(50),
	MONTHS_BALANCE INTEGER, 	
	STATUS VARCHAR(5)
);

-- Import data from csv file to bureau_balance table
COPY bureau_balance(SK_ID_BUREAU, MONTHS_BALANCE, STATUS)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\bureau_balance.csv'
DELIMITER ',' CSV HEADER;

-- Check bureau_balance table
SELECT * FROM bureau_balance;


-- Create credit_card_balance table
CREATE TABLE credit_card_balance (
	SK_ID_PREV VARCHAR(50), 
	SK_ID_CURR VARCHAR(50),
	MONTHS_BALANCE INTEGER,
	AMT_BALANCE DOUBLE PRECISION,
	AMT_CREDIT_LIMIT_ACTUAL INTEGER,
	AMT_DRAWINGS_ATM_CURRENT DOUBLE PRECISION,
	AMT_DRAWINGS_CURRENT DOUBLE PRECISION,
	AMT_DRAWINGS_OTHER_CURRENT DOUBLE PRECISION,
	AMT_DRAWINGS_POS_CURRENT DOUBLE PRECISION,
	AMT_INST_MIN_REGULARITY DOUBLE PRECISION,
	AMT_PAYMENT_CURRENT DOUBLE PRECISION,
	AMT_PAYMENT_TOTAL_CURRENT DOUBLE PRECISION,
	AMT_RECEIVABLE_PRINCIPAL DOUBLE PRECISION,
	AMT_RECIVABLE DOUBLE PRECISION,
	AMT_TOTAL_RECEIVABLE DOUBLE PRECISION,
	CNT_DRAWINGS_ATM_CURRENT NUMERIC(100, 2),
	CNT_DRAWINGS_CURRENT INTEGER,
	CNT_DRAWINGS_OTHER_CURRENT NUMERIC(100, 2),
	CNT_DRAWINGS_POS_CURRENT NUMERIC(100, 2),
	CNT_INSTALMENT_MATURE_CUM NUMERIC(100, 2),
	NAME_CONTRACT_STATUS VARCHAR(15),
	SK_DPD INTEGER,
	SK_DPD_DEF INTEGER
);

-- Import data from csv file to credit_card_balance table
COPY credit_card_balance(SK_ID_PREV, SK_ID_CURR, MONTHS_BALANCE, AMT_BALANCE, AMT_CREDIT_LIMIT_ACTUAL, AMT_DRAWINGS_ATM_CURRENT, AMT_DRAWINGS_CURRENT, AMT_DRAWINGS_OTHER_CURRENT, AMT_DRAWINGS_POS_CURRENT, AMT_INST_MIN_REGULARITY, AMT_PAYMENT_CURRENT, AMT_PAYMENT_TOTAL_CURRENT, AMT_RECEIVABLE_PRINCIPAL, AMT_RECIVABLE, AMT_TOTAL_RECEIVABLE, CNT_DRAWINGS_ATM_CURRENT, CNT_DRAWINGS_CURRENT, CNT_DRAWINGS_OTHER_CURRENT, CNT_DRAWINGS_POS_CURRENT, CNT_INSTALMENT_MATURE_CUM, NAME_CONTRACT_STATUS, SK_DPD, SK_DPD_DEF)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\credit_card_balance.csv'
DELIMITER ',' CSV HEADER;

-- Check credit_card_balance table
SELECT * FROM credit_card_balance;


-- Create installments_payments table
CREATE TABLE installments_payments (
	SK_ID_PREV VARCHAR(50),
	SK_ID_CURR VARCHAR(50),
	NUM_INSTALMENT_VERSION NUMERIC(100, 2),
	NUM_INSTALMENT_NUMBER INTEGER, 
	DAYS_INSTALMENT NUMERIC(100, 2),
	DAYS_ENTRY_PAYMENT NUMERIC(100, 2),
	AMT_INSTALMENT DOUBLE PRECISION,
	AMT_PAYMENT DOUBLE PRECISION
);

-- Import data from csv file to installments_payments table
COPY installments_payments(SK_ID_PREV, SK_ID_CURR, NUM_INSTALMENT_VERSION, NUM_INSTALMENT_NUMBER, DAYS_INSTALMENT, DAYS_ENTRY_PAYMENT, AMT_INSTALMENT, AMT_PAYMENT)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\installments_payments.csv'
DELIMITER ',' CSV HEADER;

-- Check installments_payments table
SELECT * FROM installments_payments;


-- Create POS_CASH_balance table
CREATE TABLE POS_CASH_balance (
	SK_ID_PREV VARCHAR(50),
	SK_ID_CURR VARCHAR(50),
	MONTHS_BALANCE INTEGER,
	CNT_INSTALMENT NUMERIC(100, 2),
	CNT_INSTALMENT_FUTURE NUMERIC(100, 2),
	NAME_CONTRACT_STATUS VARCHAR(30),
	SK_DPD INTEGER,
	SK_DPD_DEF INTEGER
);

-- Import data from csv file to POS_CASH_balance table
COPY POS_CASH_balance(SK_ID_PREV, SK_ID_CURR, MONTHS_BALANCE, CNT_INSTALMENT, CNT_INSTALMENT_FUTURE, NAME_CONTRACT_STATUS, SK_DPD, SK_DPD_DEF)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\POS_CASH_balance.csv'
DELIMITER ',' CSV HEADER;

-- Check POS_CASH_balance table
SELECT * FROM POS_CASH_balance;


-- Create previous_application table
CREATE TABLE previous_application (
	SK_ID_PREV VARCHAR(50),
	SK_ID_CURR VARCHAR (50),
	NAME_CONTRACT_TYPE VARCHAR(30),
	AMT_ANNUITY DOUBLE PRECISION,
	AMT_APPLICATION DOUBLE PRECISION,
	AMT_CREDIT DOUBLE PRECISION, 
	AMT_DOWN_PAYMENT DOUBLE PRECISION,
	AMT_GOODS_PRICE DOUBLE PRECISION, 
	WEEKDAY_APPR_PROCESS_START VARCHAR(15),
	HOUR_APPR_PROCESS_START INTEGER,
	FLAG_LAST_APPL_PER_CONTRACT VARCHAR(5),
	NFLAG_LAST_APPL_IN_DAY INTEGER,
	RATE_DOWN_PAYMENT DOUBLE PRECISION,
	RATE_INTEREST_PRIMARY DOUBLE PRECISION,
	RATE_INTEREST_PRIVILEGED DOUBLE PRECISION, 
	NAME_CASH_LOAN_PURPOSE VARCHAR(50),
	NAME_CONTRACT_STATUS VARCHAR(30), 
	DAYS_DECISION INTEGER,
	NAME_PAYMENT_TYPE VARCHAR(50),
	CODE_REJECT_REASON VARCHAR(15),
	NAME_TYPE_SUITE VARCHAR(15), 
	NAME_CLIENT_TYPE VARCHAR(30), 
	NAME_GOODS_CATEGORY VARCHAR(30), 
	NAME_PORTFOLIO VARCHAR(30),
	NAME_PRODUCT_TYPE VARCHAR(30),
	CHANNEL_TYPE VARCHAR(30),
	SELLERPLACE_AREA INTEGER,
	NAME_SELLER_INDUSTRY VARCHAR(30),
	CNT_PAYMENT NUMERIC(100, 2),
	NAME_YIELD_GROUP VARCHAR(30),
	PRODUCT_COMBINATION VARCHAR(30),
	DAYS_FIRST_DRAWING NUMERIC(100, 2),
	DAYS_FIRST_DUE NUMERIC(100, 2),
	DAYS_LAST_DUE_1ST_VERSION NUMERIC(100, 2),
	DAYS_LAST_DUE NUMERIC(100, 2),
	DAYS_TERMINATION NUMERIC(100, 2),
	NFLAG_INSURED_ON_APPROVAL NUMERIC(100, 2),
	PRIMARY KEY (SK_ID_PREV)
);

-- Import data from csv file to previous_application table
COPY previous_application(SK_ID_PREV, SK_ID_CURR, NAME_CONTRACT_TYPE, AMT_ANNUITY, AMT_APPLICATION, AMT_CREDIT, AMT_DOWN_PAYMENT, AMT_GOODS_PRICE, WEEKDAY_APPR_PROCESS_START, HOUR_APPR_PROCESS_START, FLAG_LAST_APPL_PER_CONTRACT, NFLAG_LAST_APPL_IN_DAY, RATE_DOWN_PAYMENT, RATE_INTEREST_PRIMARY, RATE_INTEREST_PRIVILEGED, NAME_CASH_LOAN_PURPOSE, NAME_CONTRACT_STATUS, DAYS_DECISION, NAME_PAYMENT_TYPE, CODE_REJECT_REASON, NAME_TYPE_SUITE, NAME_CLIENT_TYPE, NAME_GOODS_CATEGORY, NAME_PORTFOLIO, NAME_PRODUCT_TYPE, CHANNEL_TYPE, SELLERPLACE_AREA, NAME_SELLER_INDUSTRY, CNT_PAYMENT, NAME_YIELD_GROUP, PRODUCT_COMBINATION, DAYS_FIRST_DRAWING, DAYS_FIRST_DUE, DAYS_LAST_DUE_1ST_VERSION, DAYS_LAST_DUE, DAYS_TERMINATION, NFLAG_INSURED_ON_APPROVAL)
FROM 'C:\Users\anikm\Documents\Data Field\DS Rakamin Batch 33\JAP\Project Based Internship\Home Credit\Final Task\previous_application.csv'
DELIMITER ',' CSV HEADER;

-- Check previous_application table
SELECT * FROM previous_application;


-- Merge bureau and bureau_balance tables into application_train table 
CREATE TABLE train_app_bureau AS (
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		MODE() WITHIN GROUP (ORDER BY b.CREDIT_ACTIVE) AS CREDIT_BUREAU_ACTIVE,
		AVG(b.CREDIT_DAY_OVERDUE) AS AVG_CREDIT_DAY_OVERDUE,
		MIN(b.DAYS_CREDIT_ENDDATE) AS DAYS_CREDIT_ENDDATE,
		AVG(b.AMT_CREDIT_MAX_OVERDUE) AS AVG_AMT_CREDIT_MAX_OVERDUE,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY b.CNT_CREDIT_PROLONG) AS AVG_CREDIT_PROLONG,
		AVG(b.AMT_CREDIT_SUM) AS AVG_CREDIT_SUM,
		AVG(b.AMT_CREDIT_SUM_DEBT) AS AVG_AMT_CREDIT_SUM_DEBT,
		AVG(b.AMT_CREDIT_SUM_LIMIT) AS AVG_AMT_CREDIT_SUM_LIMIT,
		AVG(b.AMT_CREDIT_SUM_OVERDUE) AS AVG_AMT_CREDIT_SUM_OVERDUE,
		MODE() WITHIN GROUP (ORDER BY b.CREDIT_TYPE) AS CREDIT_TYPE,
		MIN(b.DAYS_CREDIT_UPDATE) AS DAYS_CREDIT_UPDATE,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY b.AMT_ANNUITY) AS AMT_ANNUITY_CB,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY bb.MONTHS_BALANCE) AS MONTHS_BALANCE_CB,
		MODE() WITHIN GROUP (ORDER BY bb.STATUS) AS STATUS_CB
	FROM application_train AS atr
	LEFT JOIN bureau AS b ON atr.SK_ID_CURR = b.SK_ID_CURR
	LEFT JOIN bureau_balance AS bb ON b.SK_ID_BUREAU = bb.SK_ID_BUREAU
	GROUP BY atr.SK_ID_CURR
);


-- Merge previous_application table into application_train table
CREATE TABLE train_app_prev AS( 
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_CONTRACT_TYPE) AS NAME_CONTRACT_TYPE_PREV,
		AVG(pa.AMT_ANNUITY) AS AVG_AMT_ANNUITY_PREV,
		AVG(pa.AMT_DOWN_PAYMENT) AS AVG_DOWN_PAYMENT_PREV,
		AVG(pa.AMT_GOODS_PRICE) AS AVG_AMT_GOODS_PRICE_PREV,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_PREV,	
		MODE() WITHIN GROUP (ORDER BY pa.CODE_REJECT_REASON) AS CODE_REJECT_REASON_PREV,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_PORTFOLIO) AS NAME_PORTFOLIO_PREV	
	FROM application_train AS atr
	LEFT JOIN previous_application AS pa ON atr.SK_ID_CURR = pa.SK_ID_CURR
	GROUP BY atr.SK_ID_CURR
);


-- Merge installments_payments table into application_train table
CREATE TABLE train_app_payment AS(
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		MAX(ip.NUM_INSTALMENT_VERSION) AS NUM_INSTALMENT_VERSION,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.NUM_INSTALMENT_NUMBER) AS NUM_INSTALMENT_NUMBER,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.DAYS_INSTALMENT) AS DAYS_INSTALMENT,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.DAYS_ENTRY_PAYMENT) AS DAYS_ENTRY_PAYMENT,
		AVG(ip.AMT_INSTALMENT) AS AVG_AMT_INSTALMENT,
		AVG(ip.AMT_PAYMENT) AS AVG_AMT_PAYMENT
	FROM application_train AS atr
	LEFT JOIN installments_payments AS ip ON atr.SK_ID_CURR = ip.SK_ID_CURR
	GROUP BY atr.SK_ID_CURR
);


-- Merge POS_CASH_balance table into application_train table
CREATE TABLE train_app_pos AS (
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY pc.MONTHS_BALANCE) AS MONTHS_BALANCE_POS,
		MIN(pc.CNT_INSTALMENT_FUTURE) AS CNT_INSTALMENT_FUTURE,
		MODE() WITHIN GROUP (ORDER BY pc.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_POS,
		MAX(pc.SK_DPD) AS SK_DPD_POS,
		MAX(pc.SK_DPD_DEF) AS SK_DPD_DEF_POS,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY pc.MONTHS_BALANCE) AS MONTHS_BALANCE_CC
	FROM application_train AS atr
	LEFT JOIN POS_CASH_balance AS pc ON atr.SK_ID_CURR = pc.SK_ID_CURR
	GROUP BY atr.SK_ID_CURR
);


-- Merge credit_card_balance table into application_train table
CREATE TABLE train_app_credit AS(
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		AVG(cc.AMT_BALANCE) AS AMT_BALANCE_CC,
		AVG(cc.AMT_CREDIT_LIMIT_ACTUAL) AS AMT_CREDIT_ACTUAL_CC,
		AVG(cc.AMT_DRAWINGS_CURRENT) AS AVG_AMT_DRAWINGS_CURRENT,
		AVG(cc.AMT_DRAWINGS_POS_CURRENT) AS AVG_AMT_DRAWINGS_POS_CURRENT,
		AVG(cc.AMT_INST_MIN_REGULARITY) AS AMT_INST_MIN_REGULARITY,
		SUM(cc.AMT_PAYMENT_CURRENT) AS AMT_PAYMENT_CURRENT,
		MIN(cc.AMT_RECEIVABLE_PRINCIPAL) AS AMT_RECEIVABLE_PRINCIPAL,
		MIN(cc.AMT_TOTAL_RECEIVABLE) AS AMT_TOTAL_RECEIVABLE,
		MAX(cc.CNT_INSTALMENT_MATURE_CUM) AS CNT_INSTALMENT_MATURE_CUM,
		MODE() WITHIN GROUP (ORDER BY cc.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_CC,
		MAX(cc.SK_DPD) AS SK_DPD_CC,
		MAX(cc.SK_DPD_DEF) AS SK_DPD_DEF_CC
	FROM application_train AS atr
	LEFT JOIN credit_card_balance AS cc ON atr.SK_ID_CURR = cc.SK_ID_CURR
	GROUP BY atr.SK_ID_CURR
);


-- Gather training data for analysis
CREATE TABLE train_dataset AS(
	SELECT
		atr.SK_ID_CURR,
		atr.TARGET,
		atr.NAME_CONTRACT_TYPE AS NAME_CONTRACT_TYPE_CURR,
		atr.CODE_GENDER,
		atr.FLAG_OWN_CAR,
		atr.FLAG_OWN_REALTY,
		atr.CNT_CHILDREN,
		atr.AMT_INCOME_TOTAL,
		atr.AMT_CREDIT AS AMT_CREDIT_CURR,
		atr.AMT_ANNUITY AS AMT_ANNUITY_CURR,
		atr.AMT_GOODS_PRICE AS AMT_GOODS_PRICE_CURR,
		atr.NAME_INCOME_TYPE,
		atr.NAME_EDUCATION_TYPE,
		atr.NAME_FAMILY_STATUS,
		atr.NAME_HOUSING_TYPE,
		atr.DAYS_BIRTH,
		atr.DAYS_EMPLOYED,
		atr.DAYS_REGISTRATION,
		atr.DAYS_ID_PUBLISH,
		atr.OCCUPATION_TYPE,
		atr.CNT_FAM_MEMBERS,
		atr.REGION_RATING_CLIENT,
		atr.ORGANIZATION_TYPE,
		atr.EXT_SOURCE_1,
		atr.EXT_SOURCE_2,
		atr.EXT_SOURCE_3,
		atr.DAYS_LAST_PHONE_CHANGE,
		ab.CREDIT_BUREAU_ACTIVE,
		ab.AVG_CREDIT_DAY_OVERDUE,
		ab.DAYS_CREDIT_ENDDATE,
		ab.AVG_AMT_CREDIT_MAX_OVERDUE,
		ab.AVG_CREDIT_PROLONG,
		ab.AVG_CREDIT_SUM,
		ab.AVG_AMT_CREDIT_SUM_DEBT,
		ab.AVG_AMT_CREDIT_SUM_LIMIT,
		ab.AVG_AMT_CREDIT_SUM_OVERDUE,
		ab.CREDIT_TYPE,
		ab.DAYS_CREDIT_UPDATE,
		ab.AMT_ANNUITY_CB,
		ab.MONTHS_BALANCE_CB,
		ab.STATUS_CB,
		ap.NAME_CONTRACT_TYPE_PREV,
		ap.AVG_AMT_ANNUITY_PREV,
		ap.AVG_DOWN_PAYMENT_PREV,
		ap.AVG_AMT_GOODS_PRICE_PREV,
		ap.NAME_CONTRACT_STATUS_PREV,	
		ap.CODE_REJECT_REASON_PREV,
		ap.NAME_PORTFOLIO_PREV,
		apa.NUM_INSTALMENT_VERSION,
		apa.NUM_INSTALMENT_NUMBER,
		apa.DAYS_INSTALMENT,
		apa.DAYS_ENTRY_PAYMENT,
		apa.AVG_AMT_INSTALMENT,
		apa.AVG_AMT_PAYMENT,
		apo.MONTHS_BALANCE_POS,
		apo.CNT_INSTALMENT_FUTURE,
		apo.NAME_CONTRACT_STATUS_POS,
		apo.SK_DPD_POS,
		apo.SK_DPD_DEF_POS,
		apo.MONTHS_BALANCE_CC,
		ac.AMT_BALANCE_CC,
		ac.AMT_CREDIT_ACTUAL_CC,
		ac.AVG_AMT_DRAWINGS_CURRENT,
		ac.AVG_AMT_DRAWINGS_POS_CURRENT,
		ac.AMT_INST_MIN_REGULARITY,
		ac.AMT_PAYMENT_CURRENT,
		ac.AMT_RECEIVABLE_PRINCIPAL,
		ac.AMT_TOTAL_RECEIVABLE,
		ac.CNT_INSTALMENT_MATURE_CUM,
		ac.NAME_CONTRACT_STATUS_CC,
		ac.SK_DPD_CC,
		ac.SK_DPD_DEF_CC
	FROM application_train AS atr
	LEFT JOIN train_app_bureau AS ab ON atr.SK_ID_CURR = ab.SK_ID_CURR
	LEFT JOIN train_app_prev AS ap ON atr.SK_ID_CURR = ap.SK_ID_CURR
	LEFT JOIN train_app_payment AS apa ON atr.SK_ID_CURR = apa.SK_ID_CURR
	LEFT JOIN train_app_pos AS apo ON atr.SK_ID_CURR = apo.SK_ID_CURR
	LEFT JOIN train_app_credit AS ac ON atr.SK_ID_CURR = ac.SK_ID_CURR
	GROUP BY 
		atr.SK_ID_CURR, ab.CREDIT_BUREAU_ACTIVE, 
		ab.AVG_CREDIT_DAY_OVERDUE,
		ab.DAYS_CREDIT_ENDDATE,
		ab.AVG_AMT_CREDIT_MAX_OVERDUE,
		ab.AVG_CREDIT_PROLONG,
		ab.AVG_CREDIT_SUM,
		ab.AVG_AMT_CREDIT_SUM_DEBT,
		ab.AVG_AMT_CREDIT_SUM_LIMIT,
		ab.AVG_AMT_CREDIT_SUM_OVERDUE,
		ab.CREDIT_TYPE,
		ab.DAYS_CREDIT_UPDATE,
		ab.AMT_ANNUITY_CB,
		ab.MONTHS_BALANCE_CB,
		ab.STATUS_CB,
		ap.NAME_CONTRACT_TYPE_PREV,
		ap.AVG_AMT_ANNUITY_PREV,
		ap.AVG_DOWN_PAYMENT_PREV,
		ap.AVG_AMT_GOODS_PRICE_PREV,
		ap.NAME_CONTRACT_STATUS_PREV,	
		ap.CODE_REJECT_REASON_PREV,
		ap.NAME_PORTFOLIO_PREV,
		apa.NUM_INSTALMENT_VERSION,
		apa.NUM_INSTALMENT_NUMBER,
		apa.DAYS_INSTALMENT,
		apa.DAYS_ENTRY_PAYMENT,
		apa.AVG_AMT_INSTALMENT,
		apa.AVG_AMT_PAYMENT,
		apo.MONTHS_BALANCE_POS,
		apo.CNT_INSTALMENT_FUTURE,
		apo.NAME_CONTRACT_STATUS_POS,
		apo.SK_DPD_POS,
		apo.SK_DPD_DEF_POS,
		apo.MONTHS_BALANCE_CC,
		ac.AMT_BALANCE_CC,
		ac.AMT_CREDIT_ACTUAL_CC,
		ac.AVG_AMT_DRAWINGS_CURRENT,
		ac.AVG_AMT_DRAWINGS_POS_CURRENT,
		ac.AMT_INST_MIN_REGULARITY,
		ac.AMT_PAYMENT_CURRENT,
		ac.AMT_RECEIVABLE_PRINCIPAL,
		ac.AMT_TOTAL_RECEIVABLE,
		ac.CNT_INSTALMENT_MATURE_CUM,
		ac.NAME_CONTRACT_STATUS_CC,
		ac.SK_DPD_CC,
		ac.SK_DPD_DEF_CC
);

-- Check the training dataset
SELECT * FROM train_dataset;


-- Merge bureau and bureau_balance tables into application_test table 
CREATE TABLE test_app_bureau AS (
	SELECT
		ate.SK_ID_CURR,
		MODE() WITHIN GROUP (ORDER BY b.CREDIT_ACTIVE) AS CREDIT_BUREAU_ACTIVE,
		AVG(b.CREDIT_DAY_OVERDUE) AS AVG_CREDIT_DAY_OVERDUE,
		MIN(b.DAYS_CREDIT_ENDDATE) AS DAYS_CREDIT_ENDDATE,
		AVG(b.AMT_CREDIT_MAX_OVERDUE) AS AVG_AMT_CREDIT_MAX_OVERDUE,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY b.CNT_CREDIT_PROLONG) AS AVG_CREDIT_PROLONG,
		AVG(b.AMT_CREDIT_SUM) AS AVG_CREDIT_SUM,
		AVG(b.AMT_CREDIT_SUM_DEBT) AS AVG_AMT_CREDIT_SUM_DEBT,
		AVG(b.AMT_CREDIT_SUM_LIMIT) AS AVG_AMT_CREDIT_SUM_LIMIT,
		AVG(b.AMT_CREDIT_SUM_OVERDUE) AS AVG_AMT_CREDIT_SUM_OVERDUE,
		MODE() WITHIN GROUP (ORDER BY b.CREDIT_TYPE) AS CREDIT_TYPE,
		MIN(b.DAYS_CREDIT_UPDATE) AS DAYS_CREDIT_UPDATE,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY b.AMT_ANNUITY) AS AMT_ANNUITY_CB,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY bb.MONTHS_BALANCE) AS MONTHS_BALANCE_CB,
		MODE() WITHIN GROUP (ORDER BY bb.STATUS) AS STATUS_CB
	FROM application_test AS ate
	LEFT JOIN bureau AS b ON ate.SK_ID_CURR = b.SK_ID_CURR
	LEFT JOIN bureau_balance AS bb ON b.SK_ID_BUREAU = bb.SK_ID_BUREAU
	GROUP BY ate.SK_ID_CURR
);


-- Merge previous_application table into application_test table
CREATE TABLE test_app_prev AS( 
	SELECT
		ate.SK_ID_CURR,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_CONTRACT_TYPE) AS NAME_CONTRACT_TYPE_PREV,
		AVG(pa.AMT_ANNUITY) AS AVG_AMT_ANNUITY_PREV,
		AVG(pa.AMT_DOWN_PAYMENT) AS AVG_DOWN_PAYMENT_PREV,
		AVG(pa.AMT_GOODS_PRICE) AS AVG_AMT_GOODS_PRICE_PREV,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_PREV,	
		MODE() WITHIN GROUP (ORDER BY pa.CODE_REJECT_REASON) AS CODE_REJECT_REASON_PREV,
		MODE() WITHIN GROUP (ORDER BY pa.NAME_PORTFOLIO) AS NAME_PORTFOLIO_PREV	
	FROM application_test AS ate
	LEFT JOIN previous_application AS pa ON ate.SK_ID_CURR = pa.SK_ID_CURR
	GROUP BY ate.SK_ID_CURR
);


-- Merge installments_payments table into application_test table
CREATE TABLE test_app_payment AS(
	SELECT
		ate.SK_ID_CURR,
		MAX(ip.NUM_INSTALMENT_VERSION) AS NUM_INSTALMENT_VERSION,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.NUM_INSTALMENT_NUMBER) AS NUM_INSTALMENT_NUMBER,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.DAYS_INSTALMENT) AS DAYS_INSTALMENT,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ip.DAYS_ENTRY_PAYMENT) AS DAYS_ENTRY_PAYMENT,
		AVG(ip.AMT_INSTALMENT) AS AVG_AMT_INSTALMENT,
		AVG(ip.AMT_PAYMENT) AS AVG_AMT_PAYMENT
	FROM application_test AS ate
	LEFT JOIN installments_payments AS ip ON ate.SK_ID_CURR = ip.SK_ID_CURR
	GROUP BY ate.SK_ID_CURR
);


-- Merge POS_CASH_balance table into application_test table
CREATE TABLE test_app_pos AS (
	SELECT
		ate.SK_ID_CURR,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY pc.MONTHS_BALANCE) AS MONTHS_BALANCE_POS,
		MIN(pc.CNT_INSTALMENT_FUTURE) AS CNT_INSTALMENT_FUTURE,
		MODE() WITHIN GROUP (ORDER BY pc.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_POS,
		MAX(pc.SK_DPD) AS SK_DPD_POS,
		MAX(pc.SK_DPD_DEF) AS SK_DPD_DEF_POS,
		PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY pc.MONTHS_BALANCE) AS MONTHS_BALANCE_CC
	FROM application_test AS ate
	LEFT JOIN POS_CASH_balance AS pc ON ate.SK_ID_CURR = pc.SK_ID_CURR
	GROUP BY ate.SK_ID_CURR
);


-- Merge credit_card_balance table into application_test table
CREATE TABLE test_app_credit AS(
	SELECT
		ate.SK_ID_CURR,
		AVG(cc.AMT_BALANCE) AS AMT_BALANCE_CC,
		AVG(cc.AMT_CREDIT_LIMIT_ACTUAL) AS AMT_CREDIT_ACTUAL_CC,
		AVG(cc.AMT_DRAWINGS_CURRENT) AS AVG_AMT_DRAWINGS_CURRENT,
		AVG(cc.AMT_DRAWINGS_POS_CURRENT) AS AVG_AMT_DRAWINGS_POS_CURRENT,
		AVG(cc.AMT_INST_MIN_REGULARITY) AS AMT_INST_MIN_REGULARITY,
		SUM(cc.AMT_PAYMENT_CURRENT) AS AMT_PAYMENT_CURRENT,
		MIN(cc.AMT_RECEIVABLE_PRINCIPAL) AS AMT_RECEIVABLE_PRINCIPAL,
		MIN(cc.AMT_TOTAL_RECEIVABLE) AS AMT_TOTAL_RECEIVABLE,
		MAX(cc.CNT_INSTALMENT_MATURE_CUM) AS CNT_INSTALMENT_MATURE_CUM,
		MODE() WITHIN GROUP (ORDER BY cc.NAME_CONTRACT_STATUS) AS NAME_CONTRACT_STATUS_CC,
		MAX(cc.SK_DPD) AS SK_DPD_CC,
		MAX(cc.SK_DPD_DEF) AS SK_DPD_DEF_CC
	FROM application_test AS ate
	LEFT JOIN credit_card_balance AS cc ON ate.SK_ID_CURR = cc.SK_ID_CURR
	GROUP BY ate.SK_ID_CURR
);


-- Gather testing data for analysis
CREATE TABLE test_dataset AS(
	SELECT
		ate.SK_ID_CURR,
		ate.NAME_CONTRACT_TYPE AS NAME_CONTRACT_TYPE_CURR,
		ate.CODE_GENDER,
		ate.FLAG_OWN_CAR,
		ate.FLAG_OWN_REALTY,
		ate.CNT_CHILDREN,
		ate.AMT_INCOME_TOTAL,
		ate.AMT_CREDIT AS AMT_CREDIT_CURR,
		ate.AMT_ANNUITY AS AMT_ANNUITY_CURR,
		ate.AMT_GOODS_PRICE AS AMT_GOODS_PRICE_CURR,
		ate.NAME_INCOME_TYPE,
		ate.NAME_EDUCATION_TYPE,
		ate.NAME_FAMILY_STATUS,
		ate.NAME_HOUSING_TYPE,
		ate.DAYS_BIRTH,
		ate.DAYS_EMPLOYED,
		ate.DAYS_REGISTRATION,
		ate.DAYS_ID_PUBLISH,
		ate.OCCUPATION_TYPE,
		ate.CNT_FAM_MEMBERS,
		ate.REGION_RATING_CLIENT,
		ate.ORGANIZATION_TYPE,
		ate.EXT_SOURCE_1,
		ate.EXT_SOURCE_2,
		ate.EXT_SOURCE_3,
		ate.DAYS_LAST_PHONE_CHANGE,
		ab.CREDIT_BUREAU_ACTIVE,
		ab.AVG_CREDIT_DAY_OVERDUE,
		ab.DAYS_CREDIT_ENDDATE,
		ab.AVG_AMT_CREDIT_MAX_OVERDUE,
		ab.AVG_CREDIT_PROLONG,
		ab.AVG_CREDIT_SUM,
		ab.AVG_AMT_CREDIT_SUM_DEBT,
		ab.AVG_AMT_CREDIT_SUM_LIMIT,
		ab.AVG_AMT_CREDIT_SUM_OVERDUE,
		ab.CREDIT_TYPE,
		ab.DAYS_CREDIT_UPDATE,
		ab.AMT_ANNUITY_CB,
		ab.MONTHS_BALANCE_CB,
		ab.STATUS_CB,
		ap.NAME_CONTRACT_TYPE_PREV,
		ap.AVG_AMT_ANNUITY_PREV,
		ap.AVG_DOWN_PAYMENT_PREV,
		ap.AVG_AMT_GOODS_PRICE_PREV,
		ap.NAME_CONTRACT_STATUS_PREV,	
		ap.CODE_REJECT_REASON_PREV,
		ap.NAME_PORTFOLIO_PREV,
		apa.NUM_INSTALMENT_VERSION,
		apa.NUM_INSTALMENT_NUMBER,
		apa.DAYS_INSTALMENT,
		apa.DAYS_ENTRY_PAYMENT,
		apa.AVG_AMT_INSTALMENT,
		apa.AVG_AMT_PAYMENT,
		apo.MONTHS_BALANCE_POS,
		apo.CNT_INSTALMENT_FUTURE,
		apo.NAME_CONTRACT_STATUS_POS,
		apo.SK_DPD_POS,
		apo.SK_DPD_DEF_POS,
		apo.MONTHS_BALANCE_CC,
		ac.AMT_BALANCE_CC,
		ac.AMT_CREDIT_ACTUAL_CC,
		ac.AVG_AMT_DRAWINGS_CURRENT,
		ac.AVG_AMT_DRAWINGS_POS_CURRENT,
		ac.AMT_INST_MIN_REGULARITY,
		ac.AMT_PAYMENT_CURRENT,
		ac.AMT_RECEIVABLE_PRINCIPAL,
		ac.AMT_TOTAL_RECEIVABLE,
		ac.CNT_INSTALMENT_MATURE_CUM,
		ac.NAME_CONTRACT_STATUS_CC,
		ac.SK_DPD_CC,
		ac.SK_DPD_DEF_CC
	FROM application_test AS ate
	LEFT JOIN test_app_bureau AS ab ON ate.SK_ID_CURR = ab.SK_ID_CURR
	LEFT JOIN test_app_prev AS ap ON ate.SK_ID_CURR = ap.SK_ID_CURR
	LEFT JOIN test_app_payment AS apa ON ate.SK_ID_CURR = apa.SK_ID_CURR
	LEFT JOIN test_app_pos AS apo ON ate.SK_ID_CURR = apo.SK_ID_CURR
	LEFT JOIN test_app_credit AS ac ON ate.SK_ID_CURR = ac.SK_ID_CURR
	GROUP BY 
		ate.SK_ID_CURR, 
		ab.CREDIT_BUREAU_ACTIVE, 
		ab.AVG_CREDIT_DAY_OVERDUE,
		ab.DAYS_CREDIT_ENDDATE,
		ab.AVG_AMT_CREDIT_MAX_OVERDUE,
		ab.AVG_CREDIT_PROLONG,
		ab.AVG_CREDIT_SUM,
		ab.AVG_AMT_CREDIT_SUM_DEBT,
		ab.AVG_AMT_CREDIT_SUM_LIMIT,
		ab.AVG_AMT_CREDIT_SUM_OVERDUE,
		ab.CREDIT_TYPE,
		ab.DAYS_CREDIT_UPDATE,
		ab.AMT_ANNUITY_CB,
		ab.MONTHS_BALANCE_CB,
		ab.STATUS_CB,
		ap.NAME_CONTRACT_TYPE_PREV,
		ap.AVG_AMT_ANNUITY_PREV,
		ap.AVG_DOWN_PAYMENT_PREV,
		ap.AVG_AMT_GOODS_PRICE_PREV,
		ap.NAME_CONTRACT_STATUS_PREV,	
		ap.CODE_REJECT_REASON_PREV,
		ap.NAME_PORTFOLIO_PREV,
		apa.NUM_INSTALMENT_VERSION,
		apa.NUM_INSTALMENT_NUMBER,
		apa.DAYS_INSTALMENT,
		apa.DAYS_ENTRY_PAYMENT,
		apa.AVG_AMT_INSTALMENT,
		apa.AVG_AMT_PAYMENT,
		apo.MONTHS_BALANCE_POS,
		apo.CNT_INSTALMENT_FUTURE,
		apo.NAME_CONTRACT_STATUS_POS,
		apo.SK_DPD_POS,
		apo.SK_DPD_DEF_POS,
		apo.MONTHS_BALANCE_CC,
		ac.AMT_BALANCE_CC,
		ac.AMT_CREDIT_ACTUAL_CC,
		ac.AVG_AMT_DRAWINGS_CURRENT,
		ac.AVG_AMT_DRAWINGS_POS_CURRENT,
		ac.AMT_INST_MIN_REGULARITY,
		ac.AMT_PAYMENT_CURRENT,
		ac.AMT_RECEIVABLE_PRINCIPAL,
		ac.AMT_TOTAL_RECEIVABLE,
		ac.CNT_INSTALMENT_MATURE_CUM,
		ac.NAME_CONTRACT_STATUS_CC,
		ac.SK_DPD_CC,
		ac.SK_DPD_DEF_CC
);

-- Check the testing dataset
SELECT * FROM test_dataset;